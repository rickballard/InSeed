(function(){try{
  new Image().src="/__t?ev=page&p="+encodeURIComponent(location.pathname);
}catch(e){}})();
document.addEventListener("click", e=>{
  const a=e.target.closest('a[href^="mailto:"],a[href*="/contact"]');
  if(!a) return;
  try{ new Image().src="/__t?ev=contact&p="+encodeURIComponent(location.pathname); }catch(e){}
}, {capture:true});
(()=>{try{
  const cur=(document.documentElement.getAttribute("lang")||"en").toLowerCase();
  document.querySelectorAll(".lang-item").forEach(li=>{
    const v=(li.getAttribute("data-lang")||li.textContent||"").trim().toLowerCase();
    li.setAttribute("aria-selected", v.startsWith(cur) ? "true" : "false");
  });
}catch(_){}})();
(() => { try {
  // dedupe topnavs (keep first)
  const navs = Array.from(document.querySelectorAll('nav.topnav'));
  if (navs.length > 1) navs.slice(1).forEach(n => n.remove());
} catch(_){} })();

(() => { try {
  // language ticks
  const cur=(document.documentElement.getAttribute("lang")||"en").toLowerCase();
  document.querySelectorAll(".lang-item,[class*='language'] li,[class*='lang'] li").forEach(li=>{
    const v=(li.getAttribute("data-lang")||li.textContent||"").trim().toLowerCase();
    li.setAttribute("aria-selected", v.startsWith(cur) ? "true" : "false");
  });
} catch(_){} })();

document.addEventListener("click", e=>{
  const a=e.target.closest('a[href^="mailto:"],a[href*="/contact"]');
  if(!a) return;
  try{ new Image().src="/__t?ev=contact&p="+encodeURIComponent(location.pathname); }catch(e){}
}, {capture:true});
(function(){
  function dedupeTopnav(){
    try{
      const navs = Array.from(document.querySelectorAll('nav.topnav'));
      if (navs.length > 1) navs.slice(1).forEach(n => n.remove());
    }catch(_){}
  }
  if (document.readyState === "loading"){
    document.addEventListener("DOMContentLoaded", dedupeTopnav);
  } else {
    dedupeTopnav();
  }
})();
(function(){ // theme toggle
  try{
    const root = document.documentElement;
    const key="inseed-theme";
    const btn = document.getElementById("themeToggle");
    const apply = (m)=>{ if(m==="dark"){root.classList.add("theme-dark");} else {root.classList.remove("theme-dark");} };
    apply(localStorage.getItem(key)||"");
    if(btn){ btn.addEventListener("click", ()=>{ const cur = (root.classList.contains("theme-dark")?"dark":"light"); const next = (cur==="dark"?"light":"dark"); localStorage.setItem(key,next); apply(next); }); }
  }catch(_){}
})();
(function(){ // language ticks + persist
  try{
    const key="inseed-lang";
    const cur = (localStorage.getItem(key) || (document.documentElement.getAttribute("lang")||"en")).toLowerCase();
    document.documentElement.setAttribute("lang",cur);
    document.querySelectorAll(".lang-item").forEach(li=>{
      const v=(li.getAttribute("data-lang")||li.textContent||"").trim().toLowerCase();
      li.setAttribute("aria-selected", v.startsWith(cur) ? "true" : "false");
      li.addEventListener("click",()=>{ localStorage.setItem(key,v); location.reload(); });
    });
  }catch(_){}
})();
(function(){ // dedupe topnav after DOM ready
  function dedupe(){ try{ const navs=[...document.querySelectorAll("nav.topnav")]; if(navs.length>1) navs.slice(1).forEach(n=>n.remove()); }catch(_){}} 
  if(document.readyState==="loading") document.addEventListener("DOMContentLoaded", dedupe); else dedupe();
})();

(()=>{try{
  const run=()=>{ const navs=[...document.querySelectorAll("nav.topnav")]; if(navs.length>1) navs.slice(1).forEach(n=>n.remove()); };
  document.readyState==="loading" ? document.addEventListener("DOMContentLoaded",run) : run();
}catch(_){}})();

(()=>{try{
  const root=document.documentElement, key="inseed-theme", btn=document.getElementById("themeToggle");
  const apply=(m)=>{ m==="dark" ? root.classList.add("theme-dark") : root.classList.remove("theme-dark"); };
  apply(localStorage.getItem(key)||"");
  btn && btn.addEventListener("click",()=>{ const cur=root.classList.contains("theme-dark")?"dark":"light"; const next=cur==="dark"?"light":"dark"; localStorage.setItem(key,next); apply(next); });
}catch(_){}})();

(()=>{try{
  const key="inseed-lang";
  const cur=(localStorage.getItem(key)||(document.documentElement.getAttribute("lang")||"en")).toLowerCase();
  document.documentElement.setAttribute("lang",cur);
  document.querySelectorAll(".lang-item").forEach(li=>{
    const v=(li.getAttribute("data-lang")||li.textContent||"").trim().toLowerCase();
    li.setAttribute("aria-selected", v.startsWith(cur) ? "true" : "false");
    li.addEventListener("click",()=>{ localStorage.setItem(key,v); location.reload(); });
  });
}catch(_){}})();

(()=>{try{
  const key="inseed-lang"; const root=document.documentElement;
  const cur=(localStorage.getItem(key)||(root.getAttribute("lang")||"en")).toLowerCase();
  root.setAttribute("lang",cur);

  // dropdown
  const wrap=document.querySelector(".lang-dropdown");
  if(wrap){
    const btn=wrap.querySelector(".lang-button");
    const menu=wrap.querySelector(".lang-menu");
    const setTicks=()=>{
      menu.querySelectorAll(".lang-item").forEach(li=>{
        const v=(li.getAttribute("data-lang")||"").toLowerCase();
        li.setAttribute("aria-selected", v===cur ? "true" : "false");
      });
    };
    setTicks();
    if(btn && menu){
      btn.addEventListener("click",e=>{
        e.stopPropagation();
        const show=!menu.classList.contains("show");
        document.querySelectorAll(".lang-menu.show").forEach(m=>m.classList.remove("show"));
        if(show){ menu.classList.add("show"); setTicks(); }
      });
      document.addEventListener("click",()=>menu.classList.remove("show"));
      menu.addEventListener("click",e=>{
        const li=e.target.closest(".lang-item"); if(!li) return;
        const v=(li.getAttribute("data-lang")||"").toLowerCase();
        if(v==="more"){ location.href="/gibberlink/"; return; }
        localStorage.setItem(key,v); root.setAttribute("lang",v); menu.classList.remove("show"); location.reload();
      }, {capture:true});
    }
  }

  // gibberlink page: clicking a card sets language
  if(location.pathname.startsWith("/gibberlink/")){
    document.querySelectorAll(".lang-list li").forEach(li=>{
      li.addEventListener("click",()=>{
        const v=(li.getAttribute("data-lang")||"").toLowerCase();
        localStorage.setItem(key,v); root.setAttribute("lang",v);
        location.href="/"; // back to home with chosen language
      });
    });
  }
}catch(_){}})();

(()=>{try{
  const wrap=document.querySelector(".lang-dropdown");
  if(!wrap) return;
  const btn=wrap.querySelector(".lang-button");
  const menu=wrap.querySelector(".lang-menu");
  if(!btn||!menu) return;

  const setOpen=(open)=>{ menu.classList.toggle("show",open); btn.setAttribute("aria-expanded", open?"true":"false"); };
  btn.addEventListener("click",(e)=>{ e.stopPropagation(); setOpen(!menu.classList.contains("show")); });
  document.addEventListener("click",()=>setOpen(false));

  // keyboard: Down/Up/Enter/Escape
  btn.addEventListener("keydown",(e)=>{
    if(e.key==="ArrowDown"||e.key==="Enter"||e.key===" "){ e.preventDefault(); setOpen(true); menu.querySelector(".lang-item")?.focus(); }
  });
  menu.addEventListener("keydown",(e)=>{
    const items=[...menu.querySelectorAll(".lang-item")];
    let i=items.indexOf(document.activeElement);
    if(e.key==="Escape"){ setOpen(false); btn.focus(); }
    if(e.key==="ArrowDown"){ e.preventDefault(); (items[i+1]||items[0])?.focus(); }
    if(e.key==="ArrowUp"){ e.preventDefault(); (items[i-1]||items[items.length-1])?.focus(); }
    if(e.key==="Enter"){ e.preventDefault(); document.activeElement?.click(); }
  });
  // make items focusable
  menu.querySelectorAll(".lang-item").forEach(li=>li.setAttribute("tabindex","0"));
}catch(_){}})();

(() => { try {
  const build = (new URLSearchParams(location.search)).get("v") || "";
  // Anonymous visitor id
  const k="inseed-uid"; let uid=localStorage.getItem(k);
  if(!uid){ const d=new Date(); const p=(n)=>String(n).padStart(2,"0");
    uid = `User${String(d.getFullYear()).slice(2)}${p(d.getMonth()+1)}${p(d.getDate())}${p(d.getHours())}${p(d.getMinutes())}`;
    localStorage.setItem(k, uid);
  }
  // Footer rewrite (if there is a footer container)
  const footer = document.querySelector("footer .container, footer");
  if (footer && !footer.querySelector(".footer-note")) {
    const p = document.createElement("p"); p.className="footer-note";
    p.innerHTML = `Rev ${build || 'site'} Â· Website continually coevolves based on usage and <a href="/feedback/">shared feedback</a>.`;
    footer.appendChild(p);
  }
  // show uid on feedback page
  const uids = document.querySelectorAll("[data-uid]");
  uids.forEach(el => el.textContent = uid);

  // Whitepaper print button
  const pb = document.querySelector(".button.print");
  if(pb){ pb.addEventListener("click", e => { e.preventDefault(); window.print(); }); }
} catch(_){} })();

(() => { try {
  const qs = new URLSearchParams(location.search);
  const build = qs.get("v") || "";
  const K="inseed-uid"; let uid = localStorage.getItem(K);
  if(!uid){ const d=new Date(),p=n=>String(n).padStart(2,"0");
    uid = `User${String(d.getFullYear()).slice(2)}${p(d.getMonth()+1)}${p(d.getDate())}${p(d.getHours())}${p(d.getMinutes())}`;
    localStorage.setItem(K,uid);
  }

  // Sticky button (once per page)
  if(!document.querySelector('.sticky-feedback')){
    const a = document.createElement('a');
    a.className='sticky-feedback'; a.href='/feedback/'; a.textContent='Share feedback';
    a.setAttribute('aria-label','Share feedback (opens feedback page)');
    document.body.appendChild(a);
  }

  // Section reactions (for pages with main content)
  const secs = Array.from(document.querySelectorAll('main section'))
    .filter(s => s.querySelector('h2'));
  secs.forEach(sec => {
    if(sec.querySelector('.reaction-bar')) return;
    if(!sec.id){
      // derive a stable id from the H2 text (runtime only; no file write)
      const title = sec.querySelector('h2')?.textContent?.trim() || 'section';
      sec.id = 's-' + title.toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-|-$/g,'');
    }
    const title = sec.querySelector('h2')?.textContent?.trim() || sec.id;
    const bar = document.createElement('div');
    bar.className='reaction-bar';
    bar.innerHTML = `
      <span class="rx-label">Quick reaction:</span>
      <button type="button" data-rx="helpful"   aria-label="Mark helpful">Helpful</button>
      <button type="button" data-rx="unclear"   aria-label="Mark unclear">Unclear</button>
      <button type="button" data-rx="pushback"  aria-label="Push back">Push back</button>
      <a class="rx-send" href="#" hidden>Open feedback â</a>`;
    sec.appendChild(bar);

    bar.addEventListener('click', async (e) => {
      const b = e.target;
      if(!(b instanceof HTMLButtonElement)) return;
      const rx = b.dataset.rx || 'note';
      const payload = {
        uid,
        path: location.pathname + '#' + sec.id,
        section: sec.id,
        title,
        reaction: rx,
        ts: new Date().toISOString()
      };
      const j = JSON.stringify(payload);
      try { await navigator.clipboard.writeText(j); } catch(_){}
      const link = bar.querySelector('.rx-send');
      link.href = '/feedback/?prefill=' + encodeURIComponent(j);
      link.hidden = false;
      b.classList.add('on');
      setTimeout(() => b.classList.remove('on'), 1500);
    });
  });

  // Feedback page: prefill from ?prefill= JSON
  if(location.pathname.startsWith('/feedback/')){
    const raw = qs.get('prefill');
    if(raw){
      try{
        const o = JSON.parse(decodeURIComponent(raw));
        // Prefer notes field; keep whatever was typed, append payload summary
        const notes = document.getElementById('notes');
        if(notes){
          const lines = [];
          if(o.title)   lines.push(`Section: ${o.title}`);
          if(o.path)    lines.push(`From: ${o.path}`);
          if(o.reaction)lines.push(`Reaction: ${o.reaction}`);
          if(o.uid)     lines.push(`UID: ${o.uid}`);
          if(o.note)    lines.push(o.note);
          notes.value = (notes.value ? notes.value + '\n' : '') + lines.join('\n');
        }
      }catch(_){}
    }
  }
} catch(_){} })();

(() => { try {
  const KEY='inseed-plain'; const root=document.documentElement;
  let on = localStorage.getItem(KEY) === '1';
  root.classList.toggle('plain', on);

  if(!document.querySelector('.plain-toggle')){
    const btn = document.createElement('button');
    btn.className='plain-toggle';
    btn.type='button';
    const setTxt = () => { btn.textContent = on ? 'Plain-English: ON' : 'Plain-English: OFF'; btn.setAttribute('aria-pressed', on?'true':'false'); };
    setTxt();
    btn.addEventListener('click', () => { on = !on; root.classList.toggle('plain', on); localStorage.setItem(KEY, on?'1':'0'); setTxt(); });
    document.body.appendChild(btn);
  }

  // Ensure keyboard access to tooltips
  document.querySelectorAll('abbr.tt').forEach(a => { a.tabIndex = 0; });
} catch(_){} })();

(() => { try {
  const key = id => `inseed-vsec-${id}`;
  document.querySelectorAll('main section').forEach(sec => {
    const h2 = sec.querySelector('h2'); if(!h2) return;
    // Ensure an id to key localStorage
    if(!sec.id){
      const t = h2.textContent.trim().toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-|-$/g,'');
      sec.id = t || ('s-' + Math.random().toString(36).slice(2));
    }
    // Button (idempotent)
    if(!h2.querySelector('.sec-verbose-toggle')){
      const btn = document.createElement('button');
      btn.className = 'sec-verbose-toggle'; btn.type='button';
      const apply = () => {
        const on = localStorage.getItem(key(sec.id)) === '1';
        sec.classList.toggle('verbose', on);
        btn.textContent = on ? 'Condense section' : 'Verbose section';
        btn.setAttribute('aria-pressed', on ? 'true' : 'false');
      };
      btn.addEventListener('click', () => {
        const cur = localStorage.getItem(key(sec.id)) === '1';
        localStorage.setItem(key(sec.id), cur ? '0' : '1');
        apply();
      });
      h2.appendChild(btn);
      apply();
    }
  });
} catch(_){} })();

(() => { try {
  // Typeable selects â input+datalist (non-destructive)
  document.querySelectorAll("#feedback form select:not([data-comboboxed])").forEach((sel,i)=>{
    sel.dataset.comboboxed="1";
    const id = sel.id || ("fbsel-"+i); sel.id=id;
    const dl = document.createElement("datalist"); dl.id = id+"-list";
    Array.from(sel.options).forEach(o => { const opt=document.createElement("option"); opt.value=o.textContent; dl.appendChild(opt); });
    const input = document.createElement("input");
    input.setAttribute("list", dl.id);
    input.name = sel.name; input.className = sel.className || "";
    input.placeholder = sel.getAttribute("placeholder") || "Type or chooseâ¦";
    sel.insertAdjacentElement("beforebegin", input);
    sel.parentNode.insertBefore(dl, input.nextSibling);
    sel.disabled = true; sel.style.display="none";
  });

  // Number inputs: show "7 = typical"
  document.querySelectorAll("#feedback form input[type=number]").forEach(n=>{
    if(!n.placeholder) n.placeholder = "7 (typical)";
    n.title = "7 = typical";
  });

  // Stronger User ID (yyMMddHHmmssfff)
  const uidInput = Array.from(document.querySelectorAll("#feedback input, form input")).find(el=>{
    const n=(el.name||"").toLowerCase(), id=(el.id||"").toLowerCase(), v=(el.value||"");
    return /user.*id/.test(n) || /user.*id/.test(id) || /^user\d+$/.test(v);
  });
  if(uidInput){
    const d=new Date(), pad=n=>n.toString().padStart(2,"0"), ms=d.getMilliseconds().toString().padStart(3,"0");
    const uid=`User${d.getFullYear().toString().slice(2)}${pad(d.getMonth()+1)}${pad(d.getDate())}${pad(d.getHours())}${pad(d.getMinutes())}${pad(d.getSeconds())}${ms}`;
    uidInput.value=uid;
  }

  // Email reveal: draw to canvas to reduce scraping
  document.querySelectorAll(".js-email-reveal").forEach(slot=>{
    if(slot.dataset.built) return; slot.dataset.built="1";
    const u="contact", d="inseed.com";
    const btn=document.createElement("button"); btn.type="button"; btn.textContent="Show email"; btn.className="button";
    btn.addEventListener("click", ()=>{
      const c=document.createElement("canvas"); const ctx=c.getContext("2d"); c.width=440; c.height=64;
      ctx.fillStyle="#1e2330"; ctx.font="28px Georgia";
      ctx.fillText(`${u}@${d}`, 12, 40);
      const img=document.createElement("img"); img.alt="contact email"; img.src=c.toDataURL("image/png");
      slot.replaceChildren(img);
    });
    slot.appendChild(btn);
  });

  // Dynamic Â© year
  document.querySelectorAll(".js-year").forEach(el => el.textContent = new Date().getFullYear());
} catch(_){} })();

(() => { try {
  const buildEmailImage = (email) => {
    const dark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
    const padX=16, padY=12, r=12;
    const font = '700 22px ui-sans-serif, system-ui, "Segoe UI", Arial';
    // temp canvas to measure text
    const m = document.createElement('canvas').getContext('2d');
    m.font = font;
    const tw = Math.ceil(m.measureText(email).width);
    const w  = tw + padX*2, h = 22 + padY*2;

    // real canvas @ devicePixelRatio for crispness
    const dpr = Math.max(1, Math.min(2, window.devicePixelRatio || 1));
    const c = document.createElement('canvas'); c.width = Math.ceil(w*dpr); c.height = Math.ceil(h*dpr);
    const ctx = c.getContext('2d'); ctx.scale(dpr,dpr); ctx.font = font;

    const bg   = dark ? '#2f44a3' : '#eaf0ff';
    const fg   = dark ? '#ffffff' : '#1e2330';
    const bdr  = dark ? '#24367a' : '#b8c2ea';

    const round = (x,y,w,h,r) => { ctx.beginPath();
      ctx.moveTo(x+r,y); ctx.arcTo(x+w,y,x+w,y+h,r); ctx.arcTo(x+w,y+h,x,y+h,r);
      ctx.arcTo(x,y+h,x,y,r); ctx.arcTo(x,y,x+w,y,r); ctx.closePath();
    };

    // background + border
    round(0.5,0.5,w-1,h-1,r);
    ctx.fillStyle = bg; ctx.fill();
    ctx.lineWidth = 1; ctx.strokeStyle = bdr; ctx.stroke();

    // text with subtle shadow for cross-background separation
    ctx.fillStyle = fg;
    ctx.shadowColor = dark ? 'rgba(0,0,0,.25)' : 'rgba(0,0,0,.06)';
    ctx.shadowBlur = dark ? 2 : 1;
    ctx.fillText(email, padX, h - padY - 2);

    const img = new Image(); img.width = w; img.height = h; img.alt = 'contact email';
    img.src = c.toDataURL('image/png');
    return img;
  };

  document.querySelectorAll('.js-email-reveal').forEach(slot => {
    if (slot.dataset.v2) return; slot.dataset.v2 = '1';
    const u='contact', d='inseed.com', email = `${u}@${d}`;
    const btn=document.createElement('button'); btn.type='button'; btn.className='button light';
    btn.textContent='Show email';
    btn.addEventListener('click', ()=>{
      slot.replaceChildren(buildEmailImage(email));
    });
    slot.replaceChildren(btn);
  });
} catch(_){} })();

